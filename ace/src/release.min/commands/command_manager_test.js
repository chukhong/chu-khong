"undefined"!=typeof process&&require("amd-loader");var CommandManager=require("./command_manager").CommandManager,keys=require("../lib/keys"),assert=require("../test/assertions");module.exports={setUp:function(){this.command={name:"gotoline",bindKey:{mac:"Command-L",win:"Ctrl-L"},called:!1,available:!0,exec:function(e){this.called=!0},isAvailable:function(e){return this.available}},this.cm=new CommandManager("mac",[this.command])},"test: register command":function(){this.cm.exec("gotoline"),assert.ok(this.command.called)},"test: mac hotkeys":function(){var e=this.cm.findKeyCommand(keys.KEY_MODS.command,"l"),e=(assert.equal(e,this.command),this.cm.findKeyCommand(keys.KEY_MODS.ctrl,"l"));assert.equal(e,void 0)},"test: win hotkeys":function(){var e=new CommandManager("win",[this.command]),m=e.findKeyCommand(keys.KEY_MODS.command,"l"),m=(assert.equal(m,void 0),e.findKeyCommand(keys.KEY_MODS.ctrl,"l"));assert.equal(m,this.command)},"test: command isAvailable":function(){this.command.available=!1,this.cm.exec("gotoline"),assert.ok(!this.command.called),this.cm.$checkCommandState=!1,this.cm.exec("gotoline"),assert.ok(this.command.called)},"test: remove command by object":function(){this.cm.removeCommand(this.command),this.cm.exec("gotoline"),assert.ok(!this.command.called);var e=this.cm.findKeyCommand(keys.KEY_MODS.command,"l");assert.equal(e,null)},"test: remove command by name":function(){this.cm.removeCommand("gotoline"),this.cm.exec("gotoline"),assert.ok(!this.command.called);var e=this.cm.findKeyCommand(keys.KEY_MODS.command,"l");assert.equal(e,null)},"test: adding a new command with the same name as an existing one should remove the old one first":function(){var e={name:"gotoline",bindKey:{mac:"Command-L",win:"Ctrl-L"},called:!1,exec:function(e){this.called=!0}};this.cm.addCommand(e),this.cm.exec("gotoline"),assert.ok(e.called),assert.ok(!this.command.called),assert.equal(this.cm.findKeyCommand(keys.KEY_MODS.command,"l"),e)},"test: adding commands and recording a macro":function(){var t="",e=(this.cm.addCommands({togglerecording:function(e){e.cm.toggleRecording(e)},replay:function(e){e.cm.replay()},cm1:function(e,m){t+="1"+(m||"")},cm2:function(e){t+="2"}}),!1);this._emit=function(){e=!0},this.cm.exec("togglerecording",this),assert.ok(this.cm.recording),assert.ok(e),this.cm.exec("cm1",this,"-"),this.cm.exec("cm2"),this.cm.exec("replay",this),assert.ok(!this.cm.recording),assert.equal(t,"1-2"),t="",this.cm.exec("replay",this),assert.equal(t,"1-2")},"test: bindkeys":function(){this.cm.bindKeys({"Ctrl-L|Command-C":"cm1","Ctrl-R":"cm2"});var e=this.cm.findKeyCommand(keys.KEY_MODS.command,"c"),e=(assert.equal(e,"cm1"),this.cm.findKeyCommand(keys.KEY_MODS.ctrl,"r")),e=(assert.equal(e,"cm2"),this.cm.bindKeys({"Ctrl-R":null}),this.cm.findKeyCommand(keys.KEY_MODS.ctrl,"r"));assert.equal(e,null)},"test: binding keys without modifiers":function(){this.cm.bindKeys({R:"cm1","Shift-r":"cm2",Return:"cm4",Enter:"cm3"});var e=this.cm.findKeyCommand(-1,"r"),e=(assert.equal(e,"cm1"),this.cm.findKeyCommand(-1,"R")),e=(assert.equal(e,"cm2"),this.cm.findKeyCommand(0,"return"));assert.equal(e+"",["cm4","cm3"]+"")}},"undefined"!=typeof module&&module===require.main&&require("asyncjs").test.testcase(module.exports).exec();