"undefined"!=typeof process&&require("amd-loader");var editor,assert=require("./../test/assertions"),ace=(require("./../test/mockdom"),require("../ace")),hardWrap=require("./hardwrap").hardWrap;module.exports={setUp:function(){(editor=editor||ace.edit(null)).focus()},tearDown:function(){editor&&(editor.destroy(),editor.container.remove(),editor=null)},"test: split lines":function(){editor.setValue("line 1 longword line 2"),hardWrap(editor,{column:12,startRow:0,endRow:2}),assert.equal(editor.getValue(),"line 1\nlongword\nline 2"),editor.setValue("line1longword line 2"),hardWrap(editor,{column:12,startRow:0,endRow:2}),assert.equal(editor.getValue(),"line1longword\nline 2"),editor.setValue("line1longword    "),hardWrap(editor,{column:12,startRow:0,endRow:2}),assert.equal(editor.getValue(),"line1longword\n"),editor.setValue("line 1               line 2"),hardWrap(editor,{column:12,startRow:0,endRow:2}),assert.equal(editor.getValue(),"line 1\nline 2"),editor.setValue("line 1  line 2"),hardWrap(editor,{column:6,startRow:0,endRow:2}),assert.equal(editor.getValue(),"line 1\nline 2"),editor.setValue("line 1"),hardWrap(editor,{column:10,startRow:0,endRow:2}),assert.equal(editor.getValue(),"line 1")},"test: merge lines":function(){editor.setValue("line \n \t 1   \nlongword\nline \n 2"),hardWrap(editor,{column:12,startRow:0,endRow:4}),assert.equal(editor.getValue(),"line 1\nlongword\nline 2"),editor.setValue("line \n 1 \n longword \n line \n2 a longer line"),hardWrap(editor,{column:12,startRow:0,endRow:4,allowMerge:!1}),assert.equal(editor.getValue(),"line \n 1 \n longword \n line \n2 a longer\nline")},"test: keep indentation":function(){var e="hello\n    long long text\n unchanged next line";editor.setValue(e),hardWrap(editor,{column:12,startRow:1,endRow:1}),assert.equal(editor.getValue(),"hello\n    long\n    long\n    text\n unchanged next line"),hardWrap(editor,{column:80,startRow:1,endRow:3}),assert.equal(editor.getValue(),e)},"test: wrap as you type":function(){editor.setValue("hello\n    long long text\n unchanged next line",-1),editor.execCommand("golinedown"),editor.execCommand("gotolineend"),editor.execCommand("insertstring"," "),editor.execCommand("insertstring","t"),assert.equal(editor.session.getLine(1),"    long long text t"),editor.setOptions({printMargin:12,hardWrap:!0}),editor.execCommand("insertstring"," "),assert.equal(editor.session.getLine(1),"    long long text t "),editor.execCommand("insertstring","x"),assert.equal(editor.getValue(),"hello\n    long\n    long\n    text t x\n unchanged next line")}},"undefined"!=typeof module&&module===require.main&&require("asyncjs").test.testcase(module.exports).exec();