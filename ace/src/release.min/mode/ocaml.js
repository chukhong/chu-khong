"use strict";var oop=require("../lib/oop"),TextMode=require("./text").Mode,OcamlHighlightRules=require("./ocaml_highlight_rules").OcamlHighlightRules,MatchingBraceOutdent=require("./matching_brace_outdent").MatchingBraceOutdent,Range=require("../range").Range,Mode=function(){this.HighlightRules=OcamlHighlightRules,this.$behaviour=this.$defaultBehaviour,this.$outdent=new MatchingBraceOutdent},indenter=(oop.inherits(Mode,TextMode),/(?:[({[=:]|[-=]>|\b(?:else|try|with))\s*$/);!function(){this.toggleCommentLines=function(e,t,n,i){for(var o,r=!0,h=/^\s*\(\*(.*)\*\)/,u=n;u<=i;u++)if(!h.test(t.getLine(u))){r=!1;break}var a=new Range(0,0,0,0);for(u=n;u<=i;u++)o=t.getLine(u),a.start.row=u,a.end.row=u,a.end.column=o.length,t.replace(a,r?o.match(h)[1]:"(*"+o+"*)")},this.getNextLineIndent=function(e,t,n){var i=this.$getIndent(t),o=this.getTokenizer().getLineTokens(t,e).tokens;return o.length&&"comment"===o[o.length-1].type||"start"!==e||!indenter.test(t)||(i+=n),i},this.checkOutdent=function(e,t,n){return this.$outdent.checkOutdent(t,n)},this.autoOutdent=function(e,t,n){this.$outdent.autoOutdent(t,n)},this.$id="ace/mode/ocaml"}.call(Mode.prototype),exports.Mode=Mode;