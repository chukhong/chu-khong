"undefined"!=typeof process&&require("amd-loader");var RubyMode=require("../ruby").Mode,EditSession=require("../../edit_session").EditSession,assert=require("../../test/assertions");module.exports={setUp:function(){this.mode=new RubyMode},"test: opening/ending tags matching/folding":function(){var e=new EditSession(["def Name(n)","   if i == 0","      ...","   else","      ...","   end","end"]),t=(e.setFoldStyle("markbeginend"),e.setMode(this.mode),this.mode.getMatching(e,0,0));assert.range(t[0],0,0,0,3),assert.range(t[1],6,0,6,3),t=this.mode.getMatching(e,6,1),assert.range(t[1],0,0,0,3),assert.range(t[0],6,0,6,3),t=this.mode.getMatching(e,1,4),assert.range(t[0],1,3,1,5),assert.range(t[1],3,3,3,7),t=this.mode.getMatching(e,5,4),assert.range(t[1],3,3,3,7),assert.range(t[0],5,3,5,6),assert.equal(e.getFoldWidget(0),"start"),assert.equal(e.getFoldWidget(1),"start"),assert.equal(e.getFoldWidget(2),""),assert.equal(e.getFoldWidget(3),"start"),assert.equal(e.getFoldWidget(4),""),assert.equal(e.getFoldWidget(5),"end"),assert.equal(e.getFoldWidget(6),"end"),assert.range(e.getFoldWidgetRange(0),0,11,5,6),assert.equal(e.getFoldWidgetRange(2),null),assert.equal(e.getFoldWidgetRange(4),null),assert.range(e.getFoldWidgetRange(5),3,7,4,9)},"test: if/unless/while/until used as modifier shouldn't have matching tag and start/end fold":function(){new EditSession(["if i == 0","   a += 1 if a.zero?","else","   a += 1 unless a.zero?","end"]).setMode(this.mode)},"test: brackets folding":function(){var e=new EditSession(["def to_json(*a)","{",'"json_class"   => self.class.name, # = "Range"','"data"         => [ first, last, exclude_end? ]',"}.to_json(*a)","end"]);e.setFoldStyle("markbeginend"),e.setMode(this.mode),assert.equal(e.getFoldWidget(0),"start"),assert.equal(e.getFoldWidget(1),"start"),assert.equal(e.getFoldWidget(2),""),assert.equal(e.getFoldWidget(4),"end"),assert.equal(e.getFoldWidget(5),"end"),assert.range(e.getFoldWidgetRange(1),1,1,4,0),assert.range(e.getFoldWidgetRange(4),1,1,4,0)},"test: multiline comments matching and folding":function(){var e=new EditSession(["=begin","text line 1","text line 2","text line 3","=end"]),t=(e.setFoldStyle("markbeginend"),e.setMode(this.mode),this.mode.getMatching(e,0,2));assert.range(t[0],0,0,0,6),assert.range(t[1],4,0,4,4),t=this.mode.getMatching(e,4,2),assert.range(t[1],0,0,0,6),assert.range(t[0],4,0,4,4),assert.equal(e.getFoldWidget(0),"start"),assert.equal(e.getFoldWidget(1),""),assert.equal(e.getFoldWidget(4),"end"),assert.range(e.getFoldWidgetRange(0),0,6,3,11),assert.range(e.getFoldWidgetRange(4),0,6,3,11)},"test: `case` with multiline `when` expressions matchings and foldings":function(){var e=new EditSession(["case","when a == 1",' puts "a is one"',"when a == 2",' puts "a is two"',"else",' puts "a is not one or two"',"end"]),t=(e.setFoldStyle("markbeginend"),e.setMode(this.mode),this.mode.getMatching(e,0,2));assert.range(t[0],0,0,0,4),assert.range(t[1],7,0,7,3),assert.equal(e.getFoldWidget(0),"start"),assert.range(e.getFoldWidgetRange(0),0,4,6,27),t=this.mode.getMatching(e,7,2),assert.range(t[0],7,0,7,3),assert.range(t[1],5,0,5,4),assert.equal(e.getFoldWidget(7),"end"),assert.range(e.getFoldWidgetRange(7),5,4,6,27),t=this.mode.getMatching(e,5,2),assert.range(t[1],7,0,7,3),assert.range(t[0],5,0,5,4),assert.equal(e.getFoldWidget(5),"start"),assert.range(e.getFoldWidgetRange(5),5,4,6,27),t=this.mode.getMatching(e,1,2),assert.range(t[0],1,0,1,4),assert.range(t[1],3,0,3,4),assert.equal(e.getFoldWidget(1),"start"),assert.range(e.getFoldWidgetRange(1),1,11,2,16)},"test: `case` with single line `when` expressions matchings and foldings":function(){var e=new EditSession(["kind = case year",'       when 1850..1889 then "Blues"','       when 1890..1909 then "Ragtime"','       when 1910..1929 then "New Orleans Jazz"','       when 1930..1939 then "Swing"','       when 1940..1950 then "Bebop"','       else "Jazz"',"       end"]),t=(e.setMode(this.mode),this.mode.getMatching(e,0,9));assert.range(t[0],0,7,0,11),assert.range(t[1],7,7,7,10),t=this.mode.getMatching(e,7,9),assert.range(t[1],0,7,0,11),assert.range(t[0],7,7,7,10),t=this.mode.getMatching(e,1,8),assert.equal(t,void 0),assert.equal(e.getFoldWidget(1),void 0),assert.equal(e.getFoldWidgetRange(1),null),t=this.mode.getMatching(e,6,8),assert.equal(t,void 0),assert.equal(e.getFoldWidget(6),void 0),assert.equal(e.getFoldWidgetRange(6),null)},"test: loops `while` and `until` including `do` keyword and `do` loops should properly highlight":function(){var e=new EditSession(["while a < 10 do","   p a","   a += 1","   0.upto 5 do |value|","       selected << value if value==2...value==2","   end","end"]),t=(e.setMode(this.mode),this.mode.getMatching(e,0,3));assert.range(t[0],0,0,0,5),assert.range(t[1],6,0,6,3),t=this.mode.getMatching(e,6,1),assert.range(t[1],0,0,0,5),assert.range(t[0],6,0,6,3),t=this.mode.getMatching(e,0,14),assert.range(t[0],0,13,0,15),assert.range(t[1],6,0,6,3),t=this.mode.getMatching(e,3,13),assert.range(t[0],3,12,3,14),assert.range(t[1],5,3,5,6),t=this.mode.getMatching(e,5,4),assert.range(t[1],3,12,3,14),assert.range(t[0],5,3,5,6)}},"undefined"!=typeof module&&module===require.main&&require("asyncjs").test.testcase(module.exports).exec();