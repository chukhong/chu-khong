"undefined"!=typeof process&&require("amd-loader");var PythonMode=require("../python").Mode,EditSession=require("../../edit_session").EditSession,assert=require("../../test/assertions");module.exports={"test: bracket folding":function(){var e=new EditSession(["[ ","stuff","]","[ ","{ ","[  #-"]),t=new PythonMode;e.setFoldStyle("markbeginend"),e.setMode(t),assert.equal(e.getFoldWidget(0),"start"),assert.equal(e.getFoldWidget(1),""),assert.equal(e.getFoldWidget(2),""),assert.equal(e.getFoldWidget(3),"start"),assert.equal(e.getFoldWidget(4),"start"),assert.equal(e.getFoldWidget(5),""),assert.range(e.getFoldWidgetRange(0),0,1,2,0),assert.equal(e.getFoldWidgetRange(3),null),assert.equal(e.getFoldWidgetRange(5),null)},"test: indentation folding":function(){var e=new EditSession(["def a: #",""," b:","  c"," ","  c",""," ",""]),t=new PythonMode;e.setFoldStyle("markbeginend"),e.setMode(t),assert.equal(e.getFoldWidget(0),"start"),assert.equal(e.getFoldWidget(1),""),assert.equal(e.getFoldWidget(2),"start"),assert.range(e.getFoldWidgetRange(0),0,6,5,3),assert.range(e.getFoldWidgetRange(2),2,3,5,3)},"test: indentation folding with strings":function(){var e=new EditSession(["def a: #",'  print """',"xx",'"""',"","  c","",""]),t=new PythonMode;e.setFoldStyle("markbeginend"),e.setMode(t),assert.equal(e.getFoldWidget(0),"start"),e.bgTokenizer.$worker(),assert.range(e.getFoldWidgetRange(0),0,6,5,3)}},"undefined"!=typeof module&&module===require.main&&require("asyncjs").test.testcase(module.exports).exec();