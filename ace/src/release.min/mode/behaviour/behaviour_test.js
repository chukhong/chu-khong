"undefined"!=typeof process&&(require("amd-loader"),require("../../test/mockdom")),require("../../multi_select");var editor,assert=require("../../test/assertions"),Range=require("../../range").Range,Editor=require("../../editor").Editor,UndoManager=require("../../undomanager").UndoManager,EditSession=require("../../edit_session").EditSession,MockRenderer=require("../../test/mockrenderer").MockRenderer,JavaScriptMode=require("../javascript").Mode,RustMode=require("../rust").Mode,XMLMode=require("../xml").Mode,HTMLMode=require("../html").Mode,CSSMode=require("../css").Mode,MarkdownMode=require("../markdown").Mode,exec=function(e,t,s){for(;editor.commands.exec(e,editor,s),1<t--;);},testRanges=function(e){assert.equal(editor.selection.getAllRanges()+"",e+"")};module.exports={"test: cstyle":function(){function e(e){assert.equal(editor.getValue(),Array(4).join(e+"\n"))}function t(t,s,i){editor.selection.rangeList.ranges.forEach(function(e){assert.range(e,t,s,t,s),t+=i||1})}var s=new EditSession(["","","",""],new JavaScriptMode);(editor=new Editor(new MockRenderer,s)).setOption("behavioursEnabled",!0),editor.navigateFileStart(),exec("addCursorBelow",2),exec("insertstring",1,"if "),exec("insertstring",1,"("),e("if ()"),t(0,4),exec("insertstring",1,")"),e("if ()"),t(0,5),exec("gotoleft",1),exec("insertstring",1,"["),e("if ([])"),t(0,5),exec("insertstring",1,"]"),e("if ([])"),t(0,6),exec("gotoleft",1),exec("backspace",1),e("if ()"),t(0,4),exec("gotolineend",1),exec("insertstring",1,"{"),e("if (){}"),t(0,6),exec("insertstring",1,"}"),e("if (){}"),t(0,7),exec("gotolinestart",1),exec("insertstring",1,"("),e("(if (){}"),exec("backspace",1),editor.setValue(""),exec("insertstring",1,"{"),assert.equal(editor.getValue(),"{"),exec("insertstring",1,"\n"),assert.equal(editor.getValue(),"{\n    \n}"),editor.setValue(""),exec("insertstring",1,"("),exec("insertstring",1,'"'),exec("insertstring",1,'"'),assert.equal(editor.getValue(),'("")'),exec("backspace",1),exec("insertstring",1,'"'),assert.equal(editor.getValue(),'("")'),editor.setValue("('foo')",1),exec("gotoleft",1),exec("selectleft",1),exec("selectMoreBefore",1),exec("insertstring",1,"'"),assert.equal(editor.getValue(),"('foo')"),exec("selectleft",1),exec("insertstring",1,'"'),assert.equal(editor.getValue(),'("foo")'),exec("selectleft",1),exec("insertstring",1,'"'),assert.equal(editor.getValue(),'("foo")'),editor.setValue("",1),exec("selectleft",1),exec("insertstring",1,'"'),assert.equal(editor.getValue(),'""'),exec("insertstring",1,"\\"),exec("insertstring",1,"n"),exec("insertstring",1,'"'),assert.equal(editor.getValue(),'"\\n"'),editor.setValue(""),exec("insertstring",1,"`"),assert.equal(editor.getValue(),"``"),exec("insertstring",1,"n"),assert.equal(editor.getValue(),"`n`"),exec("backspace",2),assert.equal(editor.getValue(),"")},"test: xml":function(){(editor=new Editor(new MockRenderer)).session.setUndoManager(new UndoManager),editor.setValue(["<OuterTag>","    <SelfClosingTag />"].join("\n")),editor.session.setMode(new XMLMode),exec("golinedown",1),exec("gotolineend",1),exec("insertstring",1,"\n"),assert.equal(editor.session.getLine(2),"    "),exec("gotolineup",1),exec("gotolineend",1),exec("insertstring",1,"\n"),assert.equal(editor.session.getLine(2),"    "),editor.session.setValue(["<OuterTag","    <xyzrt"].join("\n")),exec("golinedown",1),exec("gotolineend",1),exec("selectleft",3),exec("insertstring",1,">"),assert.equal(editor.session.getLine(1),"    <xy></xy>"),editor.setValue(["<a x='11'","<b a='","   ","'     >"].join("\n")),editor.selection.moveTo(0,100),exec("insertstring",1,">"),editor.selection.moveTo(1,100),exec("insertstring",1,">"),editor.selection.moveTo(2,1),exec("insertstring",1,">"),editor.selection.moveTo(3,1),exec("insertstring",1,">"),assert.equal(editor.getValue(),["<a x='11'></a>","<b a='>"," >  ","'>     >"].join("\n")),editor.setValue(""),"<div x='1'>".split("").forEach(function(e){exec("insertstring",1,e)}),assert.equal(editor.getValue(),"<div x='1'></div>"),exec("insertstring",1,">"),assert.equal(editor.getValue(),"<div x='1'>></div>"),editor.setValue("<div '",1),exec("selectleft",1),exec("insertstring",1,'"'),assert.equal(editor.getValue(),'<div "'),exec("selectleft",1),exec("insertstring",1,"'"),assert.equal(editor.getValue(),"<div '"),exec("selectleft",1),exec("insertstring",1,"a"),exec("selectleft",1),exec("insertstring",1,"'"),assert.equal(editor.getValue(),"<div 'a'")},"test: html":function(){editor.session.setMode(new HTMLMode),editor.setWrapBehavioursEnabled(!1),editor.setValue("<div a",1),exec("selectleft",1),exec("insertstring",1,"'"),assert.equal(editor.getValue(),"<div '"),editor.setWrapBehavioursEnabled(!0),editor.setValue("<div a",1),exec("selectleft",1),exec("insertstring",1,"'"),assert.equal(editor.getValue(),"<div 'a'"),editor.setValue("<div a=></div>",1),exec("gotoleft",7),exec("insertstring",1,'"'),assert.equal(editor.getValue(),'<div a=""></div>'),exec("insertstring",1,'"'),exec("gotoright",1),exec("insertstring",1,"\n"),assert.equal(editor.getValue(),'<div a="">\n    \n</div>'),exec("undo",1),assert.equal(editor.getValue(),'<div a=""></div>'),exec("gotoleft",1),exec("backspace",1),assert.equal(editor.getValue(),'<div a="></div>'),exec("undo",1),exec("gotoleft",1),exec("backspace",1),assert.equal(editor.getValue(),"<div a=></div>"),exec("backspace",1),assert.equal(editor.getValue(),"<div a></div>"),editor.setValue("    <div><div>",1),editor.selection.moveTo(0,9),exec("insertstring",1,"\n"),assert.equal(editor.getValue(),"    <div>\n        <div>"),editor.setValue("  <div></div>",1),exec("insertstring",1,"\n"),assert.equal(editor.getValue(),"  <div></div>\n  "),editor.setValue("    <br><br>",1),editor.selection.moveTo(0,8),exec("insertstring",1,"\n"),assert.equal(editor.getValue(),"    <br>\n    <br>"),editor.setValue("<div a='x",1),exec("gotoleft",1),exec("insertstring",1,">"),assert.equal(editor.getValue(),"<div a='>x"),editor.setValue(""),"<!DOCTYPE html></div><link><a>".split("").forEach(function(e){exec("insertstring",1,e)}),assert.equal(editor.getValue(),"<!DOCTYPE html></div><link><a></a>")},"test: quotes":function(){(editor=new Editor(new MockRenderer)).session.setMode(new RustMode),editor.setValue(""),exec("insertstring",1,'"'),exec("insertstring",1,"a"),assert.equal(editor.getValue(),'"a"'),exec("backspace",2),exec("insertstring",1,"'"),assert.equal(editor.getValue(),"'"),editor.session.setMode(new JavaScriptMode),editor.setValue(""),exec("insertstring",1,'"'),exec("insertstring",1,"a"),assert.equal(editor.getValue(),'"a"'),exec("backspace",2),exec("insertstring",1,"'"),assert.equal(editor.getValue(),"''"),exec("backspace",1),exec("insertstring",1,"`"),exec("insertstring",1,"b"),assert.equal(editor.getValue(),"`b`")},"test: css":function(){editor.session.setMode(new CSSMode),editor.setWrapBehavioursEnabled(!0),editor.setValue("a {padding",1),exec("insertstring",1,":"),assert.equal(editor.getValue(),"a {padding:;"),editor.setValue("a {padding:",1),exec("gotoleft",1),exec("insertstring",1,":"),assert.equal(editor.getValue(),"a {padding:"),editor.setValue("a {padding   ",1),exec("insertstring",1,":"),assert.equal(editor.getValue(),"a {padding   :;"),editor.setValue("a",1),exec("insertstring",1,":"),assert.equal(editor.getValue(),"a:"),editor.setValue("a {padding",1),exec("insertstring",1,":"),exec("backspace",1),assert.equal(editor.getValue(),"a {padding"),exec("backspace",2),exec("insertstring",1,":;"),exec("gotoleft",1),exec("backspace",1),assert.equal(editor.getValue(),"a {paddi;"),editor.setValue("a {padding    :",1),exec("backspace",1),assert.equal(editor.getValue(),"a {padding    "),editor.setValue("a {padding:",1),exec("insertstring",1,";"),assert.equal(editor.getValue(),"a {padding:;"),editor.setValue(";",1),exec("gotoleft",1),exec("insertstring",1,"a {padding"),exec("insertstring",1,":"),assert.equal(editor.getValue(),"a {padding:;"),editor.setValue(";",1),exec("selectleft",1),exec("insertstring",1,";"),assert.equal(editor.getValue(),";"),editor.setValue("a {padding:;",1),exec("gotoleft",1),exec("insertstring",1,";"),assert.equal(editor.getValue(),"a {padding:;"),editor.setValue("a {padding:10px",1),exec("insertstring",1,"!"),assert.equal(editor.getValue(),"a {padding:10px!important"),exec("removewordleft",2),exec("insertstring",1,"}"),exec("gotoleft",1),exec("insertstring",1,"!"),assert.equal(editor.getValue(),"a {padding:10px!important}"),exec("removewordleft",2),exec("insertstring",1,";"),exec("gotoleft",1),exec("insertstring",1,"!"),assert.equal(editor.getValue(),"a {padding:10px!important;}"),editor.selection.moveTo(0,3),exec("insertstring",1,"!"),assert.equal(editor.getValue(),"a {!padding:10px!important;}")},"test: markdown":function(){editor.session.setMode(new MarkdownMode),editor.setValue("```html",1),exec("insertstring",1,"\n"),assert.equal(editor.getValue(),"```html\n"),editor.setValue("",1),exec("insertstring",1,"`"),assert.equal(editor.getValue(),"``"),exec("insertstring",1,"x"),exec("insertstring",1,"`"),assert.equal(editor.getValue(),"`x`"),editor.setValue("",1),exec("insertstring",1,"`"),exec("insertstring",1,"`"),exec("insertstring",1,"`"),exec("insertstring",1,"x"),exec("insertstring",1,"`"),exec("insertstring",1,"`"),exec("insertstring",1,"`"),assert.equal(editor.getValue(),"```x```"),editor.setValue("",1),exec("insertstring",1,"`"),exec("insertstring",1,"`"),exec("insertstring",1,"x"),exec("insertstring",1,"`"),exec("insertstring",1,"`"),assert.equal(editor.getValue(),"``x``"),editor.setValue("",1),exec("insertstring",1,"`"),exec("insertstring",1,"`"),exec("insertstring",1,"-"),exec("insertstring",1,"`"),exec("insertstring",1,"`"),assert.equal(editor.getValue(),"``-``")}},"undefined"!=typeof module&&module===require.main&&require("asyncjs").test.testcase(module.exports).exec();