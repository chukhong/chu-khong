"undefined"!=typeof process&&(require("amd-loader"),require("./test/mockdom"));var EditSession=require("./edit_session").EditSession,Editor=require("./editor").Editor,Text=require("./mode/text").Mode,JavaScriptMode=require("./mode/javascript").Mode,CssMode=require("./mode/css").Mode,HtmlMode=require("./mode/html").Mode,MockRenderer=require("./test/mockrenderer").MockRenderer,assert=require("./test/assertions");module.exports={setUp:function(e){this.session1=new EditSession(["abc","def"]),this.session2=new EditSession(["ghi","jkl"]),this.editor=new Editor(new MockRenderer),e()},"test: change document":function(){this.editor.setSession(this.session1),assert.equal(this.editor.getSession(),this.session1),this.editor.setSession(this.session2),assert.equal(this.editor.getSession(),this.session2)},"test: only changes to the new document should have effect":function(){var e=!1;this.editor.onDocumentChange=function(){e=!0},this.editor.setSession(this.session1),this.editor.setSession(this.session2),this.session1.duplicateLines(0,0),assert.notOk(e),this.session2.duplicateLines(0,0),assert.ok(e)},"test: should use cursor of new document":function(){this.session1.getSelection().moveCursorTo(0,1),this.session2.getSelection().moveCursorTo(1,0),this.editor.setSession(this.session1),assert.position(this.editor.getCursorPosition(),0,1),this.editor.setSession(this.session2),assert.position(this.editor.getCursorPosition(),1,0)},"test: only changing the cursor of the new doc should not have an effect":function(){this.editor.onCursorChange=function(){e=!0},this.editor.setSession(this.session1),this.editor.setSession(this.session2),assert.position(this.editor.getCursorPosition(),0,0);var e=!1;this.session1.getSelection().moveCursorTo(0,1),assert.position(this.editor.getCursorPosition(),0,0),assert.notOk(e),this.session2.getSelection().moveCursorTo(1,1),assert.position(this.editor.getCursorPosition(),1,1),assert.ok(e)},"test: should use selection of new document":function(){this.session1.getSelection().selectTo(0,1),this.session2.getSelection().selectTo(1,0),this.editor.setSession(this.session1),assert.position(this.editor.getSelection().getSelectionLead(),0,1),this.editor.setSession(this.session2),assert.position(this.editor.getSelection().getSelectionLead(),1,0)},"test: only changing the selection of the new doc should not have an effect":function(){this.editor.onSelectionChange=function(){e=!0},this.editor.setSession(this.session1),this.editor.setSession(this.session2),assert.position(this.editor.getSelection().getSelectionLead(),0,0);var e=!1;this.session1.getSelection().selectTo(0,1),assert.position(this.editor.getSelection().getSelectionLead(),0,0),assert.notOk(e),this.session2.getSelection().selectTo(1,1),assert.position(this.editor.getSelection().getSelectionLead(),1,1),assert.ok(e)},"test: should use mode of new document":function(){this.editor.onChangeMode=function(){e=!0},this.editor.setSession(this.session1),this.editor.setSession(this.session2);var e=!1;this.session1.setMode(new Text),assert.notOk(e),this.session2.setMode(new JavaScriptMode),assert.ok(e)},"test: should use stop worker of old document":function(e){var s=this;s.editor.setSession(s.session1),s.session1.setMode(new CssMode),s.session1.setValue("DIV { color: red; }"),s.session1.setValue(""),s.session1.setMode(new HtmlMode),s.session1.insert({row:0,column:0},"<html></html>"),setTimeout(function(){assert.equal(Object.keys(s.session1.getAnnotations()).length,0),e()},600)}},"undefined"!=typeof module&&module===require.main&&require("asyncjs").test.testcase(module.exports).exec();