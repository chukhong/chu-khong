"undefined"!=typeof process&&require("amd-loader");var Range=require("./range").Range,RangeList=require("./range_list").RangeList,EditSession=require("./edit_session").EditSession,assert=require("./test/assertions");function flatten(e){var n=[];return e.ranges.forEach(function(e){n.push(e.start.row,e.start.column,e.end.row,e.end.column)}),n}function testRangeList(e,n){assert.equal(""+flatten(e),""+n)}module.exports={name:"ACE range_list.js","test: rangeList pointIndex":function(){var e=new RangeList;e.ranges=[new Range(1,2,3,4),new Range(4,2,5,4),new Range(8,8,9,9)],assert.equal(e.pointIndex({row:0,column:1}),-1),assert.equal(e.pointIndex({row:1,column:2}),0),assert.equal(e.pointIndex({row:1,column:3}),0),assert.equal(e.pointIndex({row:3,column:4}),0),assert.equal(e.pointIndex({row:4,column:1}),-2),assert.equal(e.pointIndex({row:5,column:1}),1),assert.equal(e.pointIndex({row:8,column:9}),2),assert.equal(e.pointIndex({row:18,column:9}),-4)},"test: rangeList pointIndex excludeEdges":function(){var e=new RangeList;e.ranges=[new Range(1,2,3,4),new Range(4,2,5,4),new Range(8,8,9,9),new Range(10,10,10,10)],assert.equal(e.pointIndex({row:0,column:1},!0),-1),assert.equal(e.pointIndex({row:1,column:2},!0),-1),assert.equal(e.pointIndex({row:1,column:3},!0),0),assert.equal(e.pointIndex({row:3,column:4},!0),-2),assert.equal(e.pointIndex({row:4,column:1},!0),-2),assert.equal(e.pointIndex({row:5,column:1},!0),1),assert.equal(e.pointIndex({row:8,column:9},!0),2),assert.equal(e.pointIndex({row:10,column:10},!0),3),assert.equal(e.pointIndex({row:18,column:9},!0),-5)},"test: rangeList add":function(){var e=new RangeList;e.addList([new Range(9,0,9,1),new Range(1,2,3,4),new Range(8,8,9,9),new Range(4,2,5,4),new Range(3,20,3,24),new Range(6,6,7,7)]),assert.equal(e.ranges.length,5),e.add(new Range(1,2,3,5)),assert.range(e.ranges[0],1,2,3,5),assert.equal(e.ranges.length,5),e.add(new Range(7,7,7,7)),assert.range(e.ranges[3],7,7,7,7),e.add(new Range(7,8,7,8)),assert.range(e.ranges[4],7,8,7,8)},"test: rangeList add empty":function(){var e=new RangeList;e.addList([new Range(7,10,7,10),new Range(9,10,9,10),new Range(8,10,8,10)]),assert.equal(e.ranges.length,3),e.add(new Range(9,10,9,10)),testRangeList(e,[7,10,7,10,8,10,8,10,9,10,9,10])},"test: rangeList merge":function(){var e,n=new RangeList;n.addList([new Range(1,2,3,4),new Range(4,2,5,4),new Range(6,6,7,7),new Range(8,8,9,9)]);assert.equal(n.ranges.length,4),n.ranges[1].end.row=7,e=n.merge(),assert.equal(e.length,1),assert.range(n.ranges[1],4,2,7,7),assert.equal(n.ranges.length,3),n.ranges[0].end.row=10,e=n.merge(),assert.range(n.ranges[0],1,2,10,4),assert.equal(e.length,2),assert.equal(n.ranges.length,1),n.ranges.push(new Range(10,10,10,10)),n.ranges.push(new Range(10,10,10,10)),n.merge(),assert.equal(n.ranges.length,2)},"test: rangeList remove":function(){var e=new RangeList,n=[new Range(1,2,3,4),new Range(4,2,5,4),new Range(6,6,7,7),new Range(8,8,9,9)];e.addList(n),assert.equal(e.ranges.length,4),e.substractPoint({row:1,column:2}),assert.equal(e.ranges.length,3),e.substractPoint({row:6,column:7}),assert.equal(e.ranges.length,2)}},"undefined"!=typeof module&&module===require.main&&require("asyncjs").test.testcase(module.exports).exec();