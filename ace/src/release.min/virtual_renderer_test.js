"undefined"!=typeof process&&(require("amd-loader"),require("./test/mockdom"));var Range=require("./range").Range,Editor=require("./editor").Editor,EditSession=require("./edit_session").EditSession,VirtualRenderer=require("./virtual_renderer").VirtualRenderer,assert=require("./test/assertions");function setScreenPosition(e,t){e.style.left=t[0]+"px",e.style.top=t[1]+"px",e.style.width=t[2]+"px",e.style.height=t[3]+"px"}require("./ext/error_marker");var editor=null;module.exports={setUp:function(){editor&&editor.destroy();var e=document.createElement("div"),t=(e.style.left="20px",e.style.top="30px",e.style.width="300px",e.style.height="100px",document.body.appendChild(e),new VirtualRenderer(e));(editor=new Editor(t)).on("destroy",function(){document.body.removeChild(e)})},tearDown:function(){editor&&editor.destroy(),editor=null},"test: screen2text the column should be rounded to the next character edge":function(e){var n=editor.renderer,i=(n.setPadding(0),n.setSession(new EditSession("1234")),n.scroller.getBoundingClientRect());function t(e,t,r,o){assert.position(n.screenToTextCoordinates(e+i.left,t+i.top),r,o)}n.characterWidth=10,n.lineHeight=15,t(4,0,0,0),t(5,0,0,1),t(9,0,0,1),t(10,0,0,1),t(14,0,0,1),t(15,0,0,2),e()},"test: handle css transforms":function(e){var t=editor.renderer,r=t.$fontMetrics,o=(setScreenPosition(editor.container,[20,30,300,100]),r.$measureNode),n=(setScreenPosition(o,[0,0,10*o.textContent.length,15]),setScreenPosition(r.$main,[0,0,10*o.textContent.length,15]),r.$characterSize.width=10,t.setPadding(0),t.onResize(!0),assert.equal(r.getCharacterWidth(),1),t.characterWidth=10,t.lineHeight=15,t.gutterWidth=40,editor.setOption("hasCssTransforms",!0),editor.container.style.transform="matrix3d(0.7, 0, 0, -0.00066, 0, 0.82, 0, -0.001, 0, 0, 1, 0, -100, -20, 10, 1)",editor.container.style.zoom=1.5,t.pixelToScreenCoordinates(100,200),r.els),o=[[0,0],[-37.60084843635559,161.62494659423828],[114.50254130363464,-6.890693664550781],[98.85665202140808,179.16063690185547]],i=(o.forEach(function(e,t){n[t].getBoundingClientRect=function(){return{left:e[0],top:e[1]}}}),n[0].getBoundingClientRect()),t=t.pixelToScreenCoordinates(i.left+100,i.top+200),i=(assert.position(t,10,11),r.transformCoordinates(null,[0,200]));assert.ok(i[0]-o[2][0]<1e-5),assert.ok(i[1]-o[2][1]<1e-5),editor.renderer.$loop._flush(),e()},"test scrollmargin + autosize":function(e){editor.setOptions({maxLines:100,wrap:!0}),editor.renderer.setScrollMargin(10,10),editor.setValue("\n\n"),editor.setValue("\n\n\n\n"),editor.renderer.once("afterRender",function(){setTimeout(function(){e()},0)})},"test invalid valus of minLines":function(){editor.setOptions({maxLines:1/0,minLines:1/0}),editor.renderer.$loop._flush(),editor.setOptions({maxLines:NaN,minLines:NaN}),editor.renderer.$loop._flush(),editor.setOptions({maxLines:Number.MAX_SAFE_INTEGER+1,minLines:Number.MAX_SAFE_INTEGER+1}),editor.renderer.$loop._flush()},"test line widgets":function(){editor.session.setValue("a\nb|c\nd"),editor.session.setAnnotations([{row:1,column:2,type:"error"}]),editor.execCommand(editor.commands.byName.goToNextError),assert.position(editor.getCursorPosition(),1,2),editor.renderer.$loop._flush(),assert.ok(editor.session.lineWidgets[1])},"test wrapped text rendering":function(){editor.setValue("a".repeat(452)+"\n"+"b".repeat(100)+"\nxxxxxx",-1),editor.container.style.height="500px",editor.setOption("wrap",40),editor.resize(!0),editor.renderer.$loop._flush(),assert.equal(editor.renderer.$changedLines,null),editor.session.remove(new Range(0,10,0,350)),editor.session.insert({row:1,column:1},"l".repeat(350)),editor.renderer.$loop._flush();var e=editor.renderer.$textLayer.element.children;assert.notEqual(e[0].style.height,e[1].style.height),assert.equal(e[0].style.height,e[1].style.top)},"test resize":function(){editor.setValue("Juhu kinners!"),editor.resize(!0)},"test placeholder":function(){editor.setOption("placeholder","hello"),assert.equal(editor.renderer.content.textContent,"hello"),editor.setOption("placeholder","new"),assert.equal(editor.renderer.content.textContent,"new"),editor.setValue("test"),editor.renderer.$loop._flush(),assert.equal(editor.renderer.content.textContent,"test"),editor.setOption("placeholder","only visible for empty value"),assert.equal(editor.renderer.content.textContent,"test"),editor.setValue(""),editor.renderer.$loop._flush(),editor._signal("input",{}),assert.equal(editor.renderer.content.textContent,"only visible for empty value")}},"undefined"!=typeof module&&module===require.main&&require("asyncjs").test.testcase(module.exports).exec();