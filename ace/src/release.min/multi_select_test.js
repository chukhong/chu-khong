"undefined"!=typeof process&&(require("amd-loader"),require("./test/mockdom")),require("./multi_select");var editor,assert=require("./test/assertions"),Range=require("./range").Range,Editor=require("./editor").Editor,EditSession=require("./edit_session").EditSession,MockRenderer=require("./test/mockrenderer").MockRenderer,UndoManager=require("./undomanager").UndoManager,exec=function(e,t,n){for(;editor.commands.exec(e,editor,n),1<t--;);},testRanges=function(e){assert.equal(editor.selection.getAllRanges()+"",e+"")};function getSelection(e){e=e.multiSelect.toJSON();return 1<(e=(e=e.length?e:[e]).map(function(e){var t,n;return e.isBackwards?(t=e.end,n=e.start):(n=e.end,t=e.start),Range.comparePoints(t,n)?[t.row,t.column,n.row,n.column]:[t.row,t.column]})).length?e:e[0]}function testSelection(e,t){assert.equal(getSelection(e)+"",t+"")}function setSelection(e,t){"number"==typeof t[0]&&(t=[t]),e.selection.fromJSON(t.map(function(e){var t={row:e[0],column:e[1]},e=2==e.length?t:{row:e[2],column:e[3]},n=0<Range.comparePoints(t,e);return n?{start:e,end:t,isBackwards:n}:{start:t,end:e,isBackwards:n}}))}module.exports={name:"ACE multi_select.js","test: multiselect editing":function(){var e=new EditSession(["w1.w2","    wtt.w","    wtt.w"]),e=((editor=new Editor(new MockRenderer,e)).navigateFileEnd(),exec("selectMoreBefore",3),assert.ok(editor.inMultiSelectMode),assert.equal(editor.selection.getAllRanges().length,4),editor.session.getDocument().getNewLineCharacter()),e="wwww".split("").join(e);assert.equal(editor.getCopyText(),e),exec("insertstring",1,"a"),exec("backspace",2),assert.equal(editor.session.getValue(),"w1.w2\ntt\ntt"),assert.equal(editor.selection.getAllRanges().length,4),exec("selectall"),assert.ok(!editor.inMultiSelectMode)},"test: multiselect navigation":function(){var e=new EditSession(["w1.w2","    wtt.w","    wtt.we"]);(editor=new Editor(new MockRenderer,e)).selectMoreLines(1),testRanges("Range: [0/0] -> [0/0],Range: [1/0] -> [1/0]"),assert.ok(editor.inMultiSelectMode),exec("golinedown"),exec("gotolineend"),testRanges("Range: [1/9] -> [1/9],Range: [2/10] -> [2/10]"),exec("selectwordleft"),testRanges("Range: [1/8] -> [1/9],Range: [2/8] -> [2/10]"),exec("golinedown",2),assert.ok(!editor.inMultiSelectMode)},"test: multiselect session change":function(){var e=new EditSession(["w1.w2","    wtt.w","    wtt.w"]),t=((editor=new Editor(new MockRenderer,e)).selectMoreLines(1),testRanges("Range: [0/0] -> [0/0],Range: [1/0] -> [1/0]"),assert.ok(editor.inMultiSelectMode),new EditSession(["w1"]));editor.setSession(t),assert.ok(!editor.inMultiSelectMode),editor.setSession(e),assert.ok(editor.inMultiSelectMode)},"test: multiselect addRange":function(){var e=new EditSession(["w1.w2","    wtt.w","    wtt.w"]),e=(editor=new Editor(new MockRenderer,e)).selection,t=new Range(0,2,0,4),t=(editor.selection.fromOrientedRange(t),new Range(0,3,0,4)),n=(e.addRange(t),assert.ok(!editor.inMultiSelectMode),assert.ok(t.isEqual(editor.selection.getRange())),new Range(0,1,0,1)),n=(e.addRange(n),assert.ok(editor.inMultiSelectMode),testRanges([n,t]),new Range(0,0,4,0));e.addRange(n),assert.ok(!editor.inMultiSelectMode)},"test: multiselect paste":function(){(editor=new Editor(new MockRenderer)).setValue("l1\nl2\nl3",-1),editor.selection.selectDown(),editor.$handlePaste(""),assert.equal("l2\nl3",editor.getValue()),editor.setValue("l1\nl2\nl3",-1),editor.selectMoreLines(1),editor.$handlePaste("x\n"),assert.equal("x\nl1\nx\nl2\nl3",editor.getValue()),editor.execCommand("gotolineend"),editor.$handlePaste("\ny"),assert.equal("x\nl1\ny\nx\nl2\ny\nl3",editor.getValue()),editor.selectMoreLines(-1),editor.$handlePaste("4\n5\n6"),assert.equal("x\nl1\ny4\nx\nl52\ny6\nl3",editor.getValue()),editor.$handlePaste("7\n\n8"),assert.equal("x\nl1\ny47\nx\nl52\ny68\nl3",editor.getValue()),editor.execCommand("selectleft"),editor.execCommand("selectleft"),editor.$handlePaste("t\nz"),assert.equal("x\nl1\nyt\nz\nx\nt\nz2\nyt\nz\nl3",editor.getValue()),editor.setValue("l1\nl2\nl3",-1),editor.selectMoreLines(1),editor.selectMoreLines(1),editor.$handlePaste("a\nb\nc\nd"),assert.equal("a\nb\nc\ndl1\na\nb\nc\ndl2\na\nb\nc\ndl3",editor.getValue())},"test: onPaste in command with multiselect":function(){var e=new EditSession(["l1","l2"]),e=((editor=new Editor(new MockRenderer,e)).commands.addCommand({name:"insertfoo",exec:function(e){e.onPaste("foo")},multiSelectAction:"forEach"}),editor.selection),t=new Range(0,2,0,2),n=new Range(1,2,1,2);e.fromOrientedRange(t),e.addRange(n),editor.execCommand("insertfoo"),assert.equal("l1foo\nl2foo",editor.getValue())},"test multiselect move lines":function(){(editor=new Editor(new MockRenderer)).setValue("l1\nl2\nl3\nl4",-1),setSelection(editor,[[0,2],[1,2],[2,2],[3,2]]),exec("copylinesdown"),assert.equal(editor.getValue(),"l1\nl1\nl2\nl2\nl3\nl3\nl4\nl4"),testSelection(editor,[[1,2],[3,2],[5,2],[7,2]]),exec("copylinesup"),assert.equal(editor.getValue(),"l1\nl1\nl1\nl2\nl2\nl2\nl3\nl3\nl3\nl4\nl4\nl4"),testSelection(editor,[[1,2],[4,2],[7,2],[10,2]]),exec("removeline"),assert.equal(editor.getValue(),"l1\nl1\nl2\nl2\nl3\nl3\nl4\nl4"),testSelection(editor,[[1,0],[3,0],[5,0],[7,0]]),setSelection(editor,[[1,2],[1,1,1,0],[3,0,3,1],[5,0,5,1],[7,0,7,1]]),exec("copylinesdown"),exec("copylinesup"),assert.equal(editor.getValue(),"l1\nl1\nl1\nl1\nl2\nl2\nl2\nl2\nl3\nl3\nl3\nl3\nl4\nl4\nl4\nl4"),testSelection(editor,[[2,2],[2,1,2,0],[6,0,6,1],[10,0,10,1],[14,0,14,1]]),exec("movelinesdown",12),assert.equal(editor.getValue(),"l1\nl1\nl1\nl2\nl2\nl2\nl3\nl3\nl3\nl4\nl4\nl4\nl1\nl2\nl3\nl4"),testSelection(editor,[[12,2],[12,1,12,0],[13,0,13,1],[14,0,14,1],[15,0,15,1]]),exec("movelinesup",12),assert.equal(editor.getValue(),"l1\nl2\nl3\nl4\nl1\nl1\nl1\nl2\nl2\nl2\nl3\nl3\nl3\nl4\nl4\nl4"),testSelection(editor,[[0,2],[0,1,0,0],[1,0,1,1],[2,0,2,1],[3,0,3,1]])},"test multiselect fromJSON/toJSON":function(){var e=new EditSession(["l1","l2"]),e=(editor=new Editor(new MockRenderer,e)).selection,t=e.toJSON(),n=new Range(0,2,0,2),o=new Range(1,2,1,2),n=(e.fromOrientedRange(n),e.addRange(o),e.toJSON());e.fromJSON(t),assert.ok(!e.isEqual(n)),assert.ok(e.isEqual(t)),e.fromJSON(n),assert.ok(!e.isEqual(t)),assert.ok(e.isEqual(n))},"test multiselect align":function(){var e=new EditSession(["l1","l2","l3"]),t=(e.setUndoManager(new UndoManager),(editor=new Editor(new MockRenderer,e)).selection);t.addRange(new Range(1,0,1,0)),t.addRange(new Range(2,2,2,2)),editor.execCommand("alignCursors"),assert.equal("  l1\n  l2\nl3",editor.getValue()),e.markUndoGroup(),editor.execCommand("undo"),assert.equal("l1\nl2\nl3",editor.getValue())},"test multiselect transpose":function(){(editor=new Editor(new MockRenderer)).setValue("ay caramba"),editor.selection.fromJSON([new Range(0,3,0,10),new Range(0,0,0,2)]),editor.execCommand("transposeletters"),assert.equal("caramba ay",editor.getValue()),editor.execCommand("transposeletters"),assert.ok(!editor.getSelectionRange().isEmpty()),assert.equal("ay caramba",editor.getValue())},"test select next":function(){(editor=new Editor(new MockRenderer)).setValue("a\na\na",1),editor.execCommand("selectMoreBefore"),editor.execCommand("selectMoreBefore"),testSelection(editor,[[0,1,0,0],[1,1,1,0],[2,1,2,0]]),assert.equal(editor.session.$highlightLineMarker.start.row,0)},"test multiSelect delete":function(){editor.setValue("\n"+"a\nb\nc/\n".repeat(4),-1),exec("selectdown",4),exec("selectleft",2),exec("selectMoreAfter",3),exec("del",1),assert.equal(editor.getValue(),"////\n"),testSelection(editor,[[0,3],[0,2],[0,1],[0,0]]),exec("selectright",1),exec("insertstring",1,"a"),assert.equal(editor.getValue(),"aaaa\n"),testSelection(editor,[[0,4],[0,3],[0,2],[0,1]]),editor.setValue("w1.w2\n\n    0\n1\n2\n3\n4\n5\n6\n    qwe\n\n\n\n\n\n"),editor.selection.fromJSON([new Range(2,4,9,7),new Range(0,3,0,4),new Range(0,0,0,1)]),editor.session.remove(new Range(4,0,5,0)),testSelection(editor,[[2,4,8,7],[0,3,0,4],[0,0,0,1]])},"test splitIntoLines":function(){var e=new EditSession(["l1","l2","l3"]),t=e.selection;editor=new Editor(new MockRenderer,e),t.moveTo(0,0),t.selectDown(),t.splitIntoLines(),assert.equal(editor.selection.ranges+"","Range: [1/0] -> [1/0],Range: [0/0] -> [0/2]",2),t.selectAll(),assert.equal(editor.selection.rangeCount,0),t.splitIntoLines(),assert.equal(editor.selection.rangeCount,3),editor.execCommand("gotolineend"),editor.execCommand("addLineAfter"),editor.execCommand("insertstring","x"),editor.execCommand("selectup"),editor.execCommand("splitSelectionIntoLines"),assert.equal(editor.selection.rangeCount,6),assert.equal(editor.selection.cursor.row,4),editor.execCommand("toggleSplitSelectionIntoLines"),assert.equal(editor.selection.getAllRanges()+"","Range: [0/1] -> [5/1]"),editor.setValue(""),assert.equal(editor.selection.inMultiSelectMode,!1),assert.equal(editor.selection.rangeCount,0)}},"undefined"!=typeof module&&module===require.main&&require("asyncjs").test.testcase(module.exports).exec();