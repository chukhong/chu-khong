"undefined"!=typeof process&&require("amd-loader");var Tokenizer=require("./tokenizer").Tokenizer,assert=require("./test/assertions");module.exports={"test: createSplitterRegexp":function(){var e=new Tokenizer({}),t=e.createSplitterRegexp("(a)(b)(?=[x)(])"),t=(assert.equal(t.source,"^(a)(b)$"),e.createSplitterRegexp("xc(?=([x)(]))")),t=(assert.equal(t.source,"^xc$"),e.createSplitterRegexp("(xc(?=([x)(])))")),t=(assert.equal(t.source,"^(xc)$"),e.createSplitterRegexp("(?=r)[(?=)](?=([x)(]))")),t=(assert.equal(t.source,"^(?=r)[(?=)]$"),e.createSplitterRegexp("(?=r)[(?=)](\\?=t)")),t=(assert.equal(t.source,"^(?=r)[(?=)](\\?=t)$"),e.createSplitterRegexp("[(?=)](\\?=t)"));assert.equal(t.source,"^[(?=)](\\?=t)$")},"test: removeCapturingGroups":function(){var e=new Tokenizer({}).removeCapturingGroups("(ax(by))[()]");assert.equal(e,"(?:ax(?:by))[()]")},"test: broken highlight rules":function(){var e=new Tokenizer({start:[{token:"s",regex:"&&&|^^^"},{defaultToken:"def"}],state1:[{token:"x",regex:/\b([\w]*)(\s*)((?::)?)/}]}),t=0,r=(e.reportError=function(){t++},e.getLineTokens("x|","start")),r=(assert.deepEqual(r,{tokens:[{value:"x|",type:"overflow"}],state:"start"}),e.getLineTokens("x|","state1"));assert.deepEqual(r,{tokens:[{value:"x",type:"x"},{value:"|",type:"overflow"}],state:"start"}),assert.equal(t,2)}},"undefined"!=typeof module&&module===require.main&&require("asyncjs").test.testcase(module.exports).exec();