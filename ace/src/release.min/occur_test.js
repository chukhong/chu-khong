"undefined"!=typeof process&&require("amd-loader");var editor,occur,EditSession=require("./edit_session").EditSession,Editor=require("./editor").Editor,MockRenderer=require("./test/mockrenderer").MockRenderer,Range=require("./range").Range,assert=require("./test/assertions"),Occur=require("./occur").Occur,occurStartCommand=require("./commands/occur_commands").occurStartCommand;module.exports={name:"ACE occur.js",setUp:function(){var e=new EditSession("");editor=new Editor(new MockRenderer,e),occur=new Occur},"test: find lines matching":function(){editor.session.insert({row:0,column:0},"abc\ndef\nxyz\nbcxbc");var e=occur.matchingLines(editor.session,{needle:"bc"});assert.deepEqual(e,[{row:0,content:"abc"},{row:3,content:"bcxbc"}])},"test: display occurrences":function(){var e="abc\ndef\nxyz\nbcx\n";editor.session.insert({row:0,column:0},e),occur.displayOccurContent(editor,{needle:"bc"}),assert.equal(editor.getValue(),"abc\nbcx"),occur.displayOriginalContent(editor),assert.equal(editor.getValue(),e)},"test: original position from occur doc":function(){editor.session.insert({row:0,column:0},"abc\ndef\nxyz\nbcx\n"),occur.displayOccurContent(editor,{needle:"bc"}),assert.equal(editor.getValue(),"abc\nbcx");var e=occur.occurToOriginalPosition(editor.session,{row:1,column:2});assert.position(e,3,2)},"test: occur command":function(){var e="hel\nlo\n\nwo\nrld\n";editor.session.insert({row:0,column:0},e),editor.commands.addCommand(occurStartCommand),editor.execCommand("occur",{needle:"o"}),assert.equal(editor.getValue(),"lo\nwo"),assert.ok(editor.getKeyboardHandler().isOccurHandler,"no occur handler installed"),assert.ok(editor.commands.byName.occurexit,"no exitoccur command installed"),editor.execCommand("occurexit"),assert.equal(editor.getValue(),e),assert.ok(!editor.getKeyboardHandler().isOccurHandler,"occur handler installed after detach"),assert.ok(!editor.commands.byName.occurexit,"exitoccur installed after exiting occur")},"test: occur navigation":function(){editor.session.insert({row:0,column:0},"hel\nlo\n\nwo\nrld\n"),editor.commands.addCommand(occurStartCommand),editor.moveCursorToPosition({row:1,column:1}),editor.execCommand("occur",{needle:"o"}),assert.equal(editor.getValue(),"lo\nwo"),assert.position(editor.getCursorPosition(),0,1,"original -> occur pos"),editor.moveCursorToPosition({row:1,column:1}),editor.execCommand("occuraccept"),assert.position(editor.getCursorPosition(),3,1,"occur -> original pos")},"test: recursive occur":function(){var e="x\nabc1\nx\nabc2\n";editor.session.insert({row:0,column:0},e),editor.commands.addCommand(occurStartCommand),editor.execCommand("occur",{needle:"abc"}),assert.equal(editor.getValue(),"abc1\nabc2","orig -> occur1"),editor.execCommand("occur",{needle:"2"}),assert.equal(editor.getValue(),"abc2","occur1 -> occur2"),editor.execCommand("occurexit"),assert.equal(editor.getValue(),"abc1\nabc2","occur2 -> occur1"),editor.execCommand("occurexit"),assert.equal(editor.getValue(),e,"occur1 -> orig")}},"undefined"!=typeof module&&module===require.main&&require("asyncjs").test.testcase(module.exports).exec();